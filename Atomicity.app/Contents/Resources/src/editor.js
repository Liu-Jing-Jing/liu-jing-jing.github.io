// Generated by CoffeeScript 1.12.7
(function() {
 console.log('hello world');
 
 var editor1 = $('#app-vertical');
 editor1.backgroundColor = 'red';
  define(function(require, exports, module) {
    var Chrome, CoffeeMode, Dir, File, HTMLMode, JavaScriptMode, Process, ace, bindKey, canon, css, editor, filename, head, open, plugins, ref, rules, save, saveAs, setMode, style;
    ref = require('osx'), Chrome = ref.Chrome, File = ref.File, Process = ref.Process, Dir = ref.Dir;
    ace = require('ace/ace');
    canon = require('pilot/canon');
    Chrome.addPane('main', '<div id="editor"></div>');
    editor = ace.edit("editor");
    editor.setTheme(require("ace/theme/twilight"));
    JavaScriptMode = require("ace/mode/javascript").Mode;
    CoffeeMode = require("ace/mode/coffee").Mode;
    HTMLMode = require("ace/mode/html").Mode;
    editor.getSession().setMode(new JavaScriptMode);
    editor.getSession().setUseSoftTabs(true);
    editor.getSession().setTabSize(2);
    setTimeout(function() {
      editor.focus();
      return editor.resize();
    }, 50);
    if (css = File.read("~/.atomicity/twilight.css")) {
      head = $('head')[0];
      style = document.createElement('style');
      rules = document.createTextNode(css);
      style.type = 'text/css';
      style.appendChild(rules);
      head.appendChild(style);
    }
    _.map(Dir.list("~/.atomicity/"), function(path) {
      if (/\.js$/.test(path)) {
        return $.getScript(path);
      } else if (/\.coffee/.test(path)) {
        return eval(CoffeeScript.compile(File.read(path)));
      }
    });
    filename = null;
    editor.getSession().on('change', function() {
      return Chrome.setDirty(true);
    });
    save = function() {
      File.write(filename, editor.getSession().getValue());
      setMode();
      return Chrome.setDirty(false);
    };
    open = function() {
      if (/png|jpe?g|gif/i.test(filename)) {
        return Chrome.openURL(filename);
      } else {
        Chrome.title(_.last(filename.split('/')));
        editor.getSession().setValue(File.read(filename));
        setMode();
        return Chrome.setDirty(false);
      }
    };
    setMode = function() {
      if (/\.js$/.test(filename)) {
        return editor.getSession().setMode(new JavaScriptMode);
      } else if (/\.coffee$/.test(filename)) {
        return editor.getSession().setMode(new CoffeeMode);
      } else if (/\.html/.test(filename)) {
        return editor.getSession().setMode(new HTMLMode);
      }
    };
    saveAs = function() {
      var file;
      if (file = Chrome.savePanel()) {
        filename = file;
        Chrome.title(_.last(filename.split('/')));
        return save();
      }
    };
    bindKey = function(name, shortcut, callback) {
      return canon.addCommand({
        name: name,
        exec: callback,
        bindKey: {
          win: null,
          mac: shortcut,
          sender: 'editor'
        }
      });
    };
    bindKey('open', 'Command-O', function(env, args, request) {
      var file;
      if (file = Chrome.openPanel()) {
        filename = file;
        return open();
      }
    });
    bindKey('openURL', 'Command-Shift-O', function(env, args, request) {
      var url;
      if (url = prompt("Enter URL:")) {
        return Chrome.openURL(url);
      }
    });
    bindKey('saveAs', 'Command-Shift-S', function(env, args, request) {
      return saveAs();
    });
    bindKey('save', 'Command-S', function(env, args, request) {
      if (filename) {
        return save();
      } else {
        return saveAs();
      }
    });
    bindKey('new', 'Command-N', function(env, args, request) {
      return Chrome.createWindow();
    });
    bindKey('copy', 'Command-C', function(env, args, request) {
      var text;
      text = editor.getSession().doc.getTextRange(editor.getSelectionRange());
      return Chrome.writeToPasteboard(text);
    });
    bindKey('cut', 'Command-X', function(env, args, request) {
      var text;
      text = editor.getSession().doc.getTextRange(editor.getSelectionRange());
      Chrome.writeToPasteboard(text);
      return editor.session.remove(editor.getSelectionRange());
    });
    bindKey('eval', 'Command-R', function(env, args, request) {
      return eval(env.editor.getSession().getValue());
    });
    bindKey('togglecomment', 'Command-/', function(env) {
      return env.editor.toggleCommentLines();
    });
    bindKey('tmoutdent', 'Command-[', function(env) {
      return env.editor.blockOutdent();
    });
    bindKey('tmindent', 'Command-]', function(env) {
      return env.editor.indent();
    });
    bindKey('moveforward', 'Alt-F', function(env) {
      return env.editor.navigateWordRight();
    });
    bindKey('moveback', 'Alt-B', function(env) {
      return env.editor.navigateWordLeft();
    });
    bindKey('deleteword', 'Alt-D', function(env) {
      return env.editor.removeWordRight();
    });
    bindKey('selectwordright', 'Alt-B', function(env) {
      return env.editor.navigateWordLeft();
    });
    bindKey('home', 'Alt-Shift-,', function(env) {
      return env.editor.navigateFileStart();
    });
    bindKey('end', 'Alt-Shift-.', function(env) {
      return env.editor.navigateFileEnd();
    });
    bindKey('fullscreen', 'Command-Shift-Return', function(env) {
      return Chrome.toggleFullscreen();
    });
    exports.bindKey = bindKey;
    bindKey('consolelog', 'Ctrl-L', function(env) {
      env.editor.insert('console.log ""');
      return env.editor.navigateLeft();
    });
    bindKey('toggleProjectDrawer', 'Command-Ctrl-N', function(env) {
      return Project.toggle();
    });
    return plugins = _.map(Dir.list(Chrome.appRoot() + "/plugins"), function(plugin) {
      return require(plugin);
    });
  });

}).call(this);
