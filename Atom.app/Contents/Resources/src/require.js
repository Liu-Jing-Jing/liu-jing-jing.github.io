// Generated by CoffeeScript 1.12.7
(function() {
  var __exists, __modules, __read, define, defines, expandPath, exts, paths, require, resolve, resourcePath;

  resourcePath = OSX.NSBundle.mainBundle.resourcePath;

  paths = [resourcePath + "/src", resourcePath + "/plugins", resourcePath + "/vendor"];

  require = function(file) {
    var ext, parts;
    file = resolve(file);
    parts = file.split('.');
    ext = parts[parts.length - 1];
    if (__modules[file] != null) {
      return __modules[file];
    }
    __modules[file] = {};
    __modules[file] = typeof exts[ext] === "function" ? exts[ext](file) : void 0;
    return __modules[file];
  };

  defines = [];

  define = function(cb) {
    return defines.push(function() {
      var exports, module;
      exports = {};
      module = {
        exports: exports
      };
      cb.call(exports, require, exports, module);
      return exports;
    });
  };

  exts = {
    css: function(file) {
      return __read(file);
    },
    js: function(file) {
      var code, ref;
      code = __read(file);
      __jsc__.evalJSString_withScriptPath(code, file);
      return (ref = defines.pop()) != null ? ref.call() : void 0;
    }
  };

  resolve = function(file) {
    
//    console.log('require called---'+ file);
    var expandedPath, parts;
    if (/!/.test(file)) {
      parts = file.split('!');
      file = parts[parts.length - 1];
    }
    if (file.slice(0, 2) === './') {
      throw "require: ./ prefix not yet implemented";
    }
    if (file.slice(0, 3) === '../') {
      throw "require: ../ prefix not yet implemented";
    }
    if (file[0] !== '/') {
      expandedPath = null;
      paths.forEach(function(path) {
        if (/\.(.+)$/.test(file) && __exists(path + "/" + file)) {
          if (expandedPath == null) {
            expandedPath = path + "/" + file;
          }
        } else {
          if (expandedPath == null) {
            expandedPath = expandPath(path + "/" + file);
          }
        }
        if (expandedPath != null) {
          return file = expandedPath;
        }
      });
    } else {
      file = expandPath(file) || file;
    }
    if (file[0] !== '/') {
      throw "require: Can't find '" + file + "'";
    }
    return file;
  };

  expandPath = function(path) {
    var ext, handler;
    for (ext in exts) {
      handler = exts[ext];
      if (__exists(path + "." + ext)) {
        return path + "." + ext;
      } else if (__exists(path + "/index." + ext)) {
        return path + "/index." + ext;
      }
    }
    return null;
  };

  __exists = function(path) {
    return OSX.NSFileManager.defaultManager.fileExistsAtPath(path);
  };

  __read = function(path) {
    return OSX.NSString.stringWithContentsOfFile(path);
  };

  __modules = {};

  this.require = require;

  this.define = define;

  this.require.paths = paths;

  this.require.exts = exts;

  this.require.resolve = resolve;

  this.require.nameToUrl = function(path) {
    return path + ".js";
  };

}).call(this);
